{"version":3,"sources":["component/ImageGallery.js","firebase.js","component/Upload.js","component/Nav.js","App.js","serviceWorker.js","index.js"],"names":["ImageGallery","useState","data","setData","firebase","firestore","collection","get","then","response","docs","catch","error","console","log","image","map","document","className","src","alt","legende","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","storage","Upload","setImage","url","setUrl","setLegende","progress","setProgress","style","margin","padding","fontFamily","fontSize","type","onChange","e","target","files","onClick","ref","name","put","on","snapshot","Math","round","bytesTransferred","totalBytes","child","getDownloadURL","id","placeholder","value","preventDefault","add","date","Date","max","Nav","to","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7567be73.chunk.js","sourcesContent":["import React,{ useEffect, useState } from 'react'\r\nimport './css/ImageGallery.css'\r\nimport firebase from 'firebase'\r\n//import {storage}  from '../firebase'\r\n\r\nexport const ImageGallery = () => {\r\n\r\n\r\nconst [ data, setData ] = useState([])\r\n\r\n \r\n   const db = firebase.firestore();\r\n   db.collection('elon').get()\r\n   .then(response => {\r\n    setData(response.docs)\r\n   })\r\n   .catch(error => {\r\n   console.log(error);\r\n   });\r\n\r\n\r\nconst image = data.map(document => {\r\n  return(\r\n    //<img src={document.data().image} alt=''/>\r\n    \r\n    <div className='card'>\r\n    <img src={document.data().image} alt=''/>\r\n    <p>{document.data().legende}</p>\r\n    </div>\r\n  \r\n)})\r\n \r\nreturn(\r\n  <div className='containerGallery'>\r\n    {image}\r\n    </div>  \r\n    );\r\n}\r\n\r\n\r\n","import firebase from \"firebase/app\";\r\nimport \"firebase/storage\";\r\n\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyB315i3mdz8SohfYVQJb5VxNljrAUgUcsk\",\r\n    authDomain: \"elon-gallery.firebaseapp.com\",\r\n    databaseURL: \"https://elon-gallery.firebaseio.com\",\r\n    projectId: \"elon-gallery\",\r\n    storageBucket: \"elon-gallery.appspot.com\",\r\n    messagingSenderId: \"341799498924\",\r\n    appId: \"1:341799498924:web:1c5d5411048b308baddb09\"\r\n  };\r\n\r\nfirebase.initializeApp(config)\r\n\r\nconst storage = firebase.storage();\r\n\r\nexport { storage, firebase as default };","import React,{useState} from 'react'\r\nimport { storage } from '../firebase'\r\nimport './css/Upload.css'\r\nimport firebase from \"firebase\";\r\n\r\nexport const Upload = () => {\r\n\r\n    const [image, setImage] = useState(null);\r\n    const [url, setUrl] = useState(\"\");\r\n    const [legende, setLegende] = useState(\"\");\r\n    const [progress, setProgress] = useState(0);\r\n\r\n  \r\n    const handleChange = e => {\r\n      if (e.target.files[0]) {\r\n        setImage(e.target.files[0]);\r\n      }\r\n    };\r\n\r\n    const handleLegende = e => {\r\n          setLegende(e.target.value);\r\n        \r\n      };\r\n\r\n    const addPic = e => {\r\n        e.preventDefault();\r\n        const db = firebase.firestore();\r\n        db.collection('elon').add({\r\n          image: url,\r\n          legende: legende,\r\n          date : new Date()\r\n        });  \r\n        setUrl('')\r\n        setLegende('')\r\n      };  \r\n  \r\n    const handleUpload = () => {\r\n      const uploadTask = storage.ref(`images/${image.name}`).put(image);\r\n      uploadTask.on(\r\n        \"state_changed\",\r\n        snapshot => {\r\n          const progress = Math.round(\r\n            (snapshot.bytesTransferred / snapshot.totalBytes) * 100\r\n          );\r\n          setProgress(progress);\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        },\r\n        () => {\r\n          storage\r\n            .ref(\"images\")\r\n            .child(image.name)\r\n            .getDownloadURL()\r\n            .then(url => {\r\n              setUrl(url);\r\n            });\r\n        }\r\n      );\r\n    };\r\n  \r\n    console.log(\"image: \", image);\r\n  \r\n    return (\r\n      <div className='container'>\r\n        <div className='containerInput' style={{margin:50,padding:50}}>  \r\n        <h3 style={{fontFamily:'Balsamiq Sans, cursive', fontSize:30}}>Upload Elon's images</h3><br />\r\n        <div className='fileTitle'>\r\n        <input type=\"file\" onChange={handleChange} />\r\n        <button onClick={handleUpload}>Upload</button>\r\n        </div>\r\n        \r\n        <input type='text' id='legende' placeholder=\"Enter a legend's images\" value={legende} onChange={handleLegende}/>\r\n        <button id='legendeSubmit' onClick={addPic}>Valider</button>\r\n        </div>\r\n        <div className='containerPlacholder'>\r\n        <progress value={progress} max=\"100\" />\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <img alt='' id='img' src={url || \"https://ngaitahu.iwi.nz/wp-content/uploads/2013/06/portrait-placeholder-female.jpg\"}/>\r\n        </div>\r\n      </div>\r\n     )\r\n}","import React from 'react'\r\nimport './css/Nav.css'\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport const Nav = ()=> {\r\n    return(\r\n        <div>\r\n            <ul>\r\n              <li><Link id='li' to=\"/upload\">Upload</Link></li>\r\n              <li><Link id='li' to=\"/elon-gallery\">Home</Link></li>\r\n            </ul>\r\n        </div>\r\n    )\r\n\r\n} ","import React from 'react';\nimport { ImageGallery } from './component/ImageGallery'\nimport { Upload } from './component/Upload'\nimport { Nav } from './component/Nav'\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n      <div className=\"App\">\n        <Nav />\n        <Route exact path='/elon-gallery'>\n            <ImageGallery />\n        </Route>\n        <Route path='/upload'>\n            <Upload />\n        </Route>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nReactDOM.render(\n  <Router>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}